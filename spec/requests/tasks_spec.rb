 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/tasks", type: :request do
  # Task. As you add validations to Task, be sure to
  # adjust the attributes here as well.
  let(:user) {create(:user)}
  let(:project) {create(:project, {user: user})}
  let(:valid_attributes) {
    {title: "Sign Up", "description"=>"We need to create a new signup page using spa with Username, password and remember me field.", "status"=>"completed", "deadline"=> DateTime.tomorrow.end_of_day, "project_id"=>project.id}
  }

  let(:invalid_attributes) {
    {title: "", "description"=>"We need to create a new signup page using spa with Username, password and remember me field.", "status"=>"completed", "deadline"=> DateTime.tomorrow.end_of_day, "project_id"=>project.id}
  }
  before :each do
    sign_in(user)
  end

  describe "GET /edit" do
    it "render a successful response" do
      task = Task.create! valid_attributes
      get edit_task_url(task), xhr: true, params: { id: task.id }
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Task" do
        expect {
          post tasks_url, params: { task: valid_attributes }
        }.to change(Task, :count).by(1)
      end

      it "redirects to the created task" do
        post tasks_url, params: { task: valid_attributes }
        expect(response).to redirect_to(project_url(Task.last.project))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {title: "Sign Up with SPA", "description"=>"We need to create a new signup page using spa with Username, password and remember me field.", "status"=>"completed", "deadline"=> DateTime.tomorrow.end_of_day, "project_id"=>project.id}
      }

      it "updates the requested task" do
        task = Task.create! valid_attributes
        patch task_url(task), params: { task: new_attributes }
        task.reload
        expect(task.title).to eq("Sign Up with SPA")
      end

      it "redirects to the task" do
        task = Task.create! valid_attributes
        patch task_url(task), params: { task: new_attributes }
        task.reload
        expect(response).to redirect_to(project_url(Task.last.project))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested task" do
      task = Task.create! valid_attributes
      expect {
        delete task_url(task)
      }.to change(Task, :count).by(-1)
    end

    it "redirects to the tasks list" do
      task = Task.create! valid_attributes
      delete task_url(task)
      expect(response).to redirect_to(project_url(task.project))
    end
  end
end
